{
  "_args": [
    [
      {
        "name": "req",
        "raw": "req",
        "rawSpec": "",
        "scope": null,
        "spec": "latest",
        "type": "tag"
      },
      "/home/qspiders/nodejs/myapp"
    ]
  ],
  "_from": "req@latest",
  "_id": "req@0.1.4",
  "_inCache": true,
  "_installable": true,
  "_location": "/req",
  "_npmUser": {
    "email": "quitlahok@gmail.com",
    "name": "nathan-lafreniere"
  },
  "_npmVersion": "1.2.14",
  "_phantomChildren": {
    "wordwrap": "0.0.2"
  },
  "_requested": {
    "name": "req",
    "raw": "req",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/req/-/req-0.1.4.tgz",
  "_shasum": "d63eeb9b82b8ed148b84314d8a8d72921182cba4",
  "_shrinkwrap": null,
  "_spec": "req",
  "_where": "/home/qspiders/nodejs/myapp",
  "author": {
    "email": "quitlahok@gmail.com",
    "name": "Nathan LaFreniere"
  },
  "bin": {
    "req": "./bin/req"
  },
  "bugs": {
    "url": "https://github.com/nlf/node-req/issues"
  },
  "dependencies": {
    "mime": "1.2.5",
    "optimist": "0.3.1",
    "progress": "0.0.4",
    "request": "2.9.202"
  },
  "description": "a CLI for request",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "d63eeb9b82b8ed148b84314d8a8d72921182cba4",
    "tarball": "https://registry.npmjs.org/req/-/req-0.1.4.tgz"
  },
  "homepage": "https://github.com/nlf/node-req",
  "maintainers": [
    {
      "email": "quitlahok@gmail.com",
      "name": "nathan-lafreniere"
    }
  ],
  "name": "req",
  "optionalDependencies": {},
  "readme": "### req\n\nreq is a very simple command line wrapper around Mikeal Roger's excellent [request](https://github.com/mikeal/request) library.\n\nreq tries to make some guesses as to what you'd really like to do. When a body is detected as parseable json, req will send it with the appropriate content-type.\nWhen sending a file, req will base the Content-Type on the file's extension. On a GET request, req will print text and json to stdout, while other requests will\nbe saved to a file according to either a Content-Disposition filename or the path of the request. You can override this, of course, by using the -o flag (works for text and json as well).\nAny headers that you manually specify will always take precedence over req's guesses.\n\nI wrote this little wrapper because I got tired of curl's massive man-page and unintuitive flags. Is it as powerful as curl? Probably not, but it is definitely easier to use.\n\nUsage:\n\n    Usage: req [options] [method] uri\n\n    Methods:\n      Any valid HTTP method is supported. If unspecified, GET will be used.\n\n    Options:\n      -h, --headers      Headers to attach to the request in the form header=value                                                                                                                  \n      -q, --querystring  Querystring parameters in the form param=value (these can also be passed as part of the URI)                                                                               \n      -b, --body         The body of the request. If this is set to valid json, it will automatically set the json content-type. Can also attach the contents of the file using e.g. @uploadthis.txt\n      -o, --output       File to write output to, otherwise will print text and json to screen and guess a filename for binaries                                                                    \n      -u, --username     Username for basic auth                                                                                                                                                    \n      -p, --password     Password for basic auth                                                                                                                                                    \n      -f, --form         Similar to the body flag, but sends the data as x-www-form-urlencoded                                                                                                       \n      -v, --verbose      Output response headers and status codes   \n\n\nSome examples:\n\nTo upload the file picture.jpg to example.com (assumes a POST request, automatically sets Content-Type to image/jpeg based on file extension)\n\n    req -b @picture.jpg example.com/pictures\n\nTo PUT some plain text as form data (x-www-form-urlencoded)\n\n    req put -f 'formdata' example.com/forms\n\nTo POST a JSON blob to example.com/users?user=tom (automatically detects valid json and sets Content-Type to application/json)\n\n    req -b '{\"status\": \"bored\"}' -q user=tom example.com/users\n\nSetting multiple query strings or headers is as easy as adding more -q or -h flags (PUT example.com/users?user=tom&status=bored&location=home)\n\n    req put -q user=tom -q status=bored -q location=home example.com/users\n\nBasic auth? Not a problem! (Note that currently you must specify these inline. A prompt will be coming in the next version)\n\n    req -u username -p password secureexample.com\n\nDownload a file\n\n    req example.com/download.exe\n\nSpecify a location\n\n    req example.com/download.exe -o realname.exe\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/nlf/node-req.git"
  },
  "version": "0.1.4"
}
